{"version":3,"sources":["hooks/http.hook.js","context/AuthContext.js","components/Loader.js","components/LinksList.js","pages/LinksPage.js","components/LinkCard.js","pages/DetailPage.js","pages/CreatePage.js","pages/AuthPage.js","hooks/message.hook.js","components/Navbar.js","App.js","hooks/auth.hook.js","routes.js","serviceWorker.js","index.js"],"names":["useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","console","log","clearError","AuthContext","createContext","token","userId","login","noop","logout","isAuthenticated","Loader","className","LinksList","links","length","map","link","index","key","_id","from","to","Date","date","toLocaleString","href","target","rel","LinksPage","useContext","setLinks","fetchLinks","Authorization","fetched","useEffect","LinkCard","clicks","DetailPage","setLink","linkId","useParams","id","getLink","CreatePage","history","useHistory","auth","window","M","updateTextFields","pressHandler","event","push","placeholder","type","value","onChange","e","onKeyPress","htmlFor","AuthPage","text","toast","html","email","password","form","setForm","changeHandler","name","registerHandler","loginHandler","onClick","disabled","Navbar","preventDefault","App","setToken","ready","setReady","setUserId","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","path","exact","useRoutes","Provider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e09500e5.chunk.js","sourcesContent":["import {useState, useCallback} from \"react\";\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n  const request = useCallback(async(url, method = 'GET', body = null, headers = {}) => {\n    setLoading(true)\n    try {\n      if (body) {\n        body = JSON.stringify(body)\n        headers['Content-Type'] = 'application/json'\n      }\n      const response = await fetch(url, { method, body, headers })\n      const data = await response.json()\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Something went wrong')\n      }\n\n      setLoading(false)\n\n      return data\n    } catch (e) {\n      console.log(e.message);\n\n      setLoading(false)\n      setError(e.message)\n      throw e\n    }\n  }, [])\n\n  const clearError = useCallback(() => setError(null), [])\n\n  return { loading, request, error, clearError }\n}","import {createContext} from 'react'\n\nfunction noop() {\n\n}\n\nexport const AuthContext = createContext({\n  token: null,\n  userId: null,\n  login: noop(),\n  logout: noop(),\n  isAuthenticated: false\n})","import React from \"react\";\nimport './loader.css'\n\nexport const Loader = () => {\n  return (\n    <div className=\"loader\">\n      <div className=\"preloader-wrapper big active\">\n        <div className=\"spinner-layer spinner-blue-only\">\n          <div className=\"circle-clipper left\">\n            <div className=\"circle\"></div>\n          </div>\n          <div className=\"gap-patch\">\n            <div className=\"circle\"></div>\n          </div>\n          <div className=\"circle-clipper right\">\n            <div className=\"circle\"></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","import React from \"react\";\n\nexport const LinksList = ({ links }) => {\n  if (!links.length) return <p className='center'>No links yet</p>\n\n  return (\n    <table>\n      <thead>\n      <tr>\n        <th>#</th>\n        <th>Original link</th>\n        <th>New link</th>\n        <th>Date of creation</th>\n        <th></th>\n      </tr>\n      </thead>\n      <tbody>\n      { links.map((link, index) => {\n        return (\n          <tr key={ link._id }>\n            <td>{ index + 1 }</td>\n            <td>{ link.from }</td>\n            <td>{ link.to }</td>\n            <td>{ new Date(link.date).toLocaleString() }</td>\n            <td>\n              <a href={ link.to } target=\"_blank\" rel=\"noopener noreferrer\">Open</a>\n            </td>\n          </tr>\n        )\n      }) }\n      </tbody>\n    </table>\n  )\n}","import React, {useCallback, useContext, useEffect, useState} from \"react\"\nimport {useHttp} from \"../hooks/http.hook\";\nimport {AuthContext} from \"../context/AuthContext\";\nimport {Loader} from \"../components/Loader\";\nimport {LinksList} from \"../components/LinksList\";\n\nexport const LinksPage = () => {\n  const { token } = useContext(AuthContext)\n  const [links, setLinks] = useState([])\n  const { request, loading } = useHttp()\n\n  const fetchLinks = useCallback(async() => {\n    try {\n      const fetched = await request('/api/link', 'GET', null, {\n        Authorization: `Bearer ${ token }`\n      })\n      setLinks(fetched)\n    } catch (e) {\n    }\n  }, [token, request])\n\n  useEffect(() => {\n    fetchLinks()\n  }, [fetchLinks])\n\n  if (loading) return <Loader/>\n\n  return (\n    <>\n      { !loading && <LinksList links={ links }/> }\n    </>\n  )\n}","import React from \"react\";\n\nexport const LinkCard = ({ link }) => {\n  return (\n    <>\n      <h2>Link</h2>\n\n      <p>Your link: <a href={ link.to } target=\"_blank\" rel=\"noopener noreferrer\">{ link.to }</a></p>\n      <p>From: <a href={ link.from } target=\"_blank\" rel=\"noopener noreferrer\">{ link.from }</a></p>\n      <p>Number of clicks on the link: <strong>{ link.clicks }</strong></p>\n      <p>Creating date: <strong>{ new Date(link.date).toLocaleString() }</strong></p>\n    </>\n  )\n}","import React, {useCallback, useContext, useEffect, useState} from \"react\"\nimport {useParams} from 'react-router-dom'\nimport {useHttp} from \"../hooks/http.hook\";\nimport {AuthContext} from \"../context/AuthContext\";\nimport {Loader} from \"../components/Loader\";\nimport {LinkCard} from \"../components/LinkCard\";\n\nexport const DetailPage = () => {\n  const { token } = useContext(AuthContext)\n  const { request, loading } = useHttp()\n  const [link, setLink] = useState(null)\n  const linkId = useParams().id\n\n  const getLink = useCallback(async() => {\n    try {\n      const fetched = await request(`/api/link/${ linkId }`, 'GET', null, {\n        Authorization: `Bearer ${ token }`\n      })\n      setLink(fetched)\n    } catch (e) {\n    }\n  }, [token, linkId, request])\n\n  useEffect(() => {\n    getLink()\n  }, [getLink])\n\n  if (loading) return <Loader/>\n\n  return (\n    <>\n      { !loading && link && <LinkCard link={ link }/> }\n    </>\n  )\n}","import React, {useContext, useEffect, useState} from \"react\"\nimport {useHttp} from \"../hooks/http.hook\";\nimport {useHistory} from 'react-router-dom'\nimport {AuthContext} from \"../context/AuthContext\";\n\nexport const CreatePage = () => {\n  const history = useHistory()\n  const auth = useContext(AuthContext)\n  const { request } = useHttp()\n  const [link, setLink] = useState('')\n\n  useEffect(() => {\n    window.M.updateTextFields()\n  }, [])\n\n  const pressHandler = async event => {\n    if (event.key === 'Enter') {\n      try {\n        const data = await request('/api/link/generate', 'POST', { from: link }, {\n          Authorization: `Bearer ${ auth.token }`\n        })\n        history.push(`/detail/${ data.link._id }`)\n      } catch (e) {\n      }\n    }\n  }\n  return (\n    <div className=\"row\">\n      <div className=\"col s8 offset-s2\">\n        <div className=\"input-field\">\n          <input\n            placeholder=\"Link\"\n            id=\"link\"\n            type=\"text\"\n            value={ link }\n            onChange={ e => setLink(e.target.value) }\n            onKeyPress={ pressHandler }\n          />\n          <label htmlFor=\"link\">Link</label>\n        </div>\n      </div>\n    </div>\n  )\n}","import React, {useContext, useEffect, useState} from \"react\"\nimport {useHttp} from \"../hooks/http.hook\";\nimport {useMessage} from \"../hooks/message.hook\";\nimport {AuthContext} from \"../context/AuthContext\";\nimport './pages.css'\nimport 'materialize-css'\n\nexport const AuthPage = () => {\n  const auth = useContext(AuthContext)\n  const message = useMessage()\n  const { loading, request, error, clearError } = useHttp()\n  const [form, setForm] = useState({\n    email: '', password: ''\n  })\n\n  useEffect(() => {\n    message(error)\n    clearError()\n  }, [error, message, clearError])\n\n  useEffect(() => {\n    window.M.updateTextFields()\n  }, [])\n\n  const changeHandler = event => {\n    setForm({ ...form, [event.target.name]: event.target.value })\n  }\n\n  const registerHandler = async() => {\n    try {\n      const data = await request('/api/auth/register', 'POST', { ...form })\n      message(data.message)\n    } catch (e) {\n    }\n  }\n\n  const loginHandler = async() => {\n    try {\n      const data = await request('/api/auth/login', 'POST', { ...form })\n      auth.login(data.token, data.userId)\n    } catch (e) {\n    }\n  }\n\n  return (\n    <div className='row'>\n      <div className=\"col s6 offset-s3\">\n        <h1>Shorten the link</h1>\n        <div className=\"card blue darken-1\">\n          <div className=\"card-content white-text\">\n            <span className=\"card-title\">Authorization</span>\n            <div>\n              <div className=\"input-field\">\n                <input\n                  placeholder=\"Email\"\n                  id=\"email\"\n                  type=\"email\"\n                  name='email'\n                  className=\"yellow-input\"\n                  value={ form.email }\n                  onChange={ changeHandler }\n                />\n                <label htmlFor=\"email\">Email</label>\n                <div className=\"input-field\">\n                  <input\n                    placeholder=\"Password\"\n                    id=\"password\"\n                    type=\"password\"\n                    name='password'\n                    className=\"yellow-input\"\n                    value={ form.password }\n                    onChange={ changeHandler }\n                  />\n                  <label htmlFor=\"email\">Password</label>\n                </div>\n              </div>\n            </div>\n            <div className=\"card-action\">\n              <button\n                className='btn yellow darken-4 sign-in'\n                onClick={ loginHandler }\n                disabled={ loading }\n              >Sign in\n              </button>\n              <button\n                className='btn grey lighten-1 black-text'\n                onClick={ registerHandler }\n                disabled={ loading }\n              >Sign up\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","import {useCallback} from 'react'\n\nexport const useMessage = () => {\n  return useCallback(text => {\n    if (window.M && text) {\n      window.M.toast({ html: text })\n    }\n  }, [])\n}","import React, {useContext} from \"react\";\nimport {NavLink, useHistory} from \"react-router-dom\";\nimport {AuthContext} from \"../context/AuthContext\";\nimport './navbar.css'\n\nexport const Navbar = () => {\n  const history = useHistory()\n  const auth = useContext(AuthContext)\n\n  const logoutHandler = event => {\n    event.preventDefault()\n    auth.logout()\n    history.push('/')\n  }\n\n  return (\n    <nav>\n      <div className=\"nav-wrapper blue darken-1 nav-bar\">\n        <a href=\"/\" className=\"brand-logo\">Absolute-link</a>\n        <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n          <li><NavLink to=\"/create\">Create</NavLink></li>\n          <li><NavLink to=\"/links\">Links</NavLink></li>\n          <li><a href=\"/\" onClick={ logoutHandler }>Exit</a></li>\n        </ul>\n      </div>\n    </nav>\n  )\n}","import React from 'react'\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport {useRoutes} from \"./routes\"\nimport {useAuth} from \"./hooks/auth.hook\"\nimport {AuthContext} from \"./context/AuthContext\"\nimport {Navbar} from \"./components/Navbar\"\nimport {Loader} from \"./components/Loader\";\nimport 'materialize-css'\n\nfunction App() {\n  const { token, login, logout, userId, ready } = useAuth()\n  const isAuthenticated = !!token\n  const routes = useRoutes(isAuthenticated)\n\n  if(!ready){\n    return <Loader/>\n  }\n\n  return (\n    <AuthContext.Provider value={ {\n      token, login, logout, userId, isAuthenticated\n    } }>\n      <Router>\n        { isAuthenticated && <Navbar/> }\n        <div className='container'>\n          { routes }\n        </div>\n      </Router>\n    </AuthContext.Provider>\n  )\n}\n\nexport default App\n","import {useState, useCallback, useEffect} from 'react'\n\n\nconst storageName = 'userDate'\nexport const useAuth = () => {\n  const [token, setToken] = useState(null)\n  const [ready, setReady] = useState(false)\n  const [userId, setUserId] = useState(null)\n\n  const login = useCallback((jwtToken, id) => {\n    setToken(jwtToken)\n    setUserId(id)\n\n    localStorage.setItem(storageName, JSON.stringify({\n      userId: id, token: jwtToken\n    }))\n  }, [])\n  const logout = useCallback(() => {\n    setToken(null)\n    setUserId(null)\n    localStorage.removeItem(storageName)\n  }, [])\n\n  useEffect(() => {\n    const data = JSON.parse(localStorage.getItem(storageName))\n\n    if (data && data.token) {\n      login(data.token, data.userId)\n    }\n    setReady(true)\n  }, [login])\n\n  return { login, logout, token, userId, ready }\n}","import React from \"react\"\nimport {Switch, Route, Redirect} from 'react-router-dom'\nimport {LinksPage} from \"./pages/LinksPage\";\nimport {DetailPage} from \"./pages/DetailPage\";\nimport {CreatePage} from \"./pages/CreatePage\";\nimport {AuthPage} from \"./pages/AuthPage\";\n\nexport const useRoutes = (isAuthenticated) => {\n  if (isAuthenticated) {\n    return (\n      <Switch>\n        <Route path='/links' exact>\n          <LinksPage/>\n        </Route>\n        <Route path='/create' exact>\n          <CreatePage/>\n        </Route>\n        <Route path='/detail/:id' exact>\n          <DetailPage/>\n        </Route>\n        <Redirect to='/create'/>\n      </Switch>\n    )\n  }\n\n  return (\n    <Switch>\n      <Route>\n        <Route path='/' exact>\n          <AuthPage/>\n        </Route>\n        <Redirect to='/'/>\n      </Route>\n    </Switch>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}